// <auto-generated />
using System;
using Grind.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Grind.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Grind.Core.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApartmentNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Grind.Core.Entities.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CancellationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CurrentParticipants")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainerId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Grind.Core.Entities.ClientClass", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ClientId", "ClassId");

                    b.HasIndex("ClassId");

                    b.ToTable("ClientClasses");
                });

            modelBuilder.Entity("Grind.Core.Entities.ClientPreferredClass", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("ClassCategory")
                        .HasColumnType("int");

                    b.HasKey("ClientId", "ClassCategory");

                    b.ToTable("ClientPreferredClasses");
                });

            modelBuilder.Entity("Grind.Core.Entities.ClientPreferredTime", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("PreferredDay")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("PreferredEndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("PreferredStartTime")
                        .HasColumnType("time");

                    b.HasKey("ClientId", "PreferredDay");

                    b.ToTable("ClientPreferredTimes");
                });

            modelBuilder.Entity("Grind.Core.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Grind.Core.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[AddressId] IS NOT NULL");

                    b.ToTable("People", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Grind.Core.Entities.TrainerPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("PayPeriod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerPayments");
                });

            modelBuilder.Entity("Grind.Core.Entities.WaitingListEntry", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.HasKey("ClientId", "ClassId");

                    b.HasIndex("ClassId");

                    b.ToTable("WaitingListEntries");
                });

            modelBuilder.Entity("Grind.Core.Entities.Admin", b =>
                {
                    b.HasBaseType("Grind.Core.Entities.Person");

                    b.ToTable("Admins", (string)null);
                });

            modelBuilder.Entity("Grind.Core.Entities.Client", b =>
                {
                    b.HasBaseType("Grind.Core.Entities.Person");

                    b.Property<decimal>("BalanceDue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("MonthlyPaymentAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("PreferredDifficulty")
                        .HasColumnType("int");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("Grind.Core.Entities.Trainer", b =>
                {
                    b.HasBaseType("Grind.Core.Entities.Person");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("decimal(18, 2)");

                    b.PrimitiveCollection<string>("Specializations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Trainers", (string)null);
                });

            modelBuilder.Entity("Grind.Core.Entities.Class", b =>
                {
                    b.HasOne("Grind.Core.Entities.Trainer", "Trainer")
                        .WithMany("Classes")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Grind.Core.Entities.ClientClass", b =>
                {
                    b.HasOne("Grind.Core.Entities.Class", "Class")
                        .WithMany("ClientClasses")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Grind.Core.Entities.Client", "Client")
                        .WithMany("ClientClasses")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Grind.Core.Entities.ClientPreferredClass", b =>
                {
                    b.HasOne("Grind.Core.Entities.Client", "Client")
                        .WithMany("ClientPreferredClasses")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Grind.Core.Entities.ClientPreferredTime", b =>
                {
                    b.HasOne("Grind.Core.Entities.Client", "Client")
                        .WithMany("ClientPreferredTimes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Grind.Core.Entities.Payment", b =>
                {
                    b.HasOne("Grind.Core.Entities.Client", "Client")
                        .WithMany("Payments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Grind.Core.Entities.Person", b =>
                {
                    b.HasOne("Grind.Core.Entities.Address", "Address")
                        .WithOne()
                        .HasForeignKey("Grind.Core.Entities.Person", "AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Grind.Core.Entities.TrainerPayment", b =>
                {
                    b.HasOne("Grind.Core.Entities.Trainer", "Trainer")
                        .WithMany("TrainerPayments")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Grind.Core.Entities.WaitingListEntry", b =>
                {
                    b.HasOne("Grind.Core.Entities.Class", "Class")
                        .WithMany("WaitingListEntries")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Grind.Core.Entities.Client", "Client")
                        .WithMany("WaitingListEntries")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Grind.Core.Entities.Admin", b =>
                {
                    b.HasOne("Grind.Core.Entities.Person", null)
                        .WithOne()
                        .HasForeignKey("Grind.Core.Entities.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Grind.Core.Entities.Client", b =>
                {
                    b.HasOne("Grind.Core.Entities.Person", null)
                        .WithOne()
                        .HasForeignKey("Grind.Core.Entities.Client", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Grind.Core.Entities.Trainer", b =>
                {
                    b.HasOne("Grind.Core.Entities.Person", null)
                        .WithOne()
                        .HasForeignKey("Grind.Core.Entities.Trainer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Grind.Core.Entities.Class", b =>
                {
                    b.Navigation("ClientClasses");

                    b.Navigation("WaitingListEntries");
                });

            modelBuilder.Entity("Grind.Core.Entities.Client", b =>
                {
                    b.Navigation("ClientClasses");

                    b.Navigation("ClientPreferredClasses");

                    b.Navigation("ClientPreferredTimes");

                    b.Navigation("Payments");

                    b.Navigation("WaitingListEntries");
                });

            modelBuilder.Entity("Grind.Core.Entities.Trainer", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("TrainerPayments");
                });
#pragma warning restore 612, 618
        }
    }
}
